rm index.php        删除工作区内容
git rm index.php    删除版本库
cat hello.txt       查询hello.txt的内容
vim hello.txt       编辑一个hello.txt的文件
:wq!                强制保存并退出
git clone [url]     拷贝一个 Git 仓库到本地
从远程仓库克隆时，Git自动把本地的master分支和远程的master分支对应起来，并且远程仓库的默认名称是origin。

git diff readme.txt 查看修改内容
git init            初始化,在内部会生成.git文件夹
git checkout -- index.php 将暂存区的文件撤销，重新放回工作区，但是修改的内容并不会删除，需要删除，还需要
git checkout ―index.php

删除文件，还没有提交：直接使用git checkout ― index.php 
已经提交，找回删除文件（版本回退）：使用 git reset ―hard HEAD^

git add D:\wamp\wamp\www\learn\git\test1\cmd2.txt    提交到仓库
git commit -m "cmd2"       描述
git status          要随时掌握工作区的状态

git log             查看修改日志
git log --pretty=oneline        查看修改日志显示成为一行
git log --pretty=oneline --abbrev-commit    查找历史提交的commit id
git reset --hard HEAD^ 回退到上一次版本号
ssh-keygen -t rsa -C “1635929054@qq.com”生成密钥对     user文件夹下.pub文件

git remote rm origin
git remote add origin https://github.com/Mrjiajia/test1.git   关联远程仓库
git push -u origin master         第一次推送master分支的所有内容，以后可以省略

git branch            查看当前分支
git branch dev        创建分支dev
git checkout dev      切换到分支dev
git checkout -b dev   创建并切换到dev分支
git merge dev         合并dev分支到当前分支
git branch -d dev     删除分支dev
git branch -D dev     强行删除分支dev

git push -u origin master        将本地代码提交到服务器上
git pull                         更新服务器代码到本地
git pull --rebase test1 master   是将test1这个版本库的代码更新到本地的master主分支

1、查看远端库列表
git remote -v

2、推送/拉取
git push origin branch			//将本地库推送到远程banch分支
git pull origin branch			//将远端banch分支拉取到本地并且合并 

3、分布拉取
git fetch origin			//将远端库获取本地但不合并
git merge origin			//将本地的远端库合并


合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
git merge --no-ff -m "merge with no-ff" dev  因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
合并后，我们用git log看看分支历史，合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。


git remote       查看远程仓库信息
	git remote
	origin
git remote -v    查看远程仓库详细信息
	git remote -v
	origin  git@github.com:michaelliao/learngit.git (fetch)
	origin  git@github.com:michaelliao/learngit.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

git tag v1.0            新建一个标签v1.0，默认为HEAD
git log --pretty=oneline --abbrev-commit        查看历史提交的commit id
git tag v1.0 6224937    指定一个commit id
git tag                 查看tag标签
git show v1.0           查看标签v1.0信息
git tag -a v0.1 -m "version 0.1 released" 3628164   
创建带有说明的标签，用-a指定标签名，-m指定说明文字

git tag -s v0.2 -m "version 0.2 released" fec145a
通过-s用私钥签名一个标签
git tag -d v0.1          删除标签v0.1
git push origin v1.0     推送标签v1.0到远程
git push origin --tags   一次性推送全部尚未推送到远程的本地标签
git push origin :refs/tags/v1.0   删除远程标签



git push origin master     把该分支上的所有本地提交推送到远程库
git push origin dev        推送本地的dev分支到远程的dev分支上
并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！



向GitHub上提交文件success.txt：

vim success.txt     
:wq!                
git add success.txt
git commit -m "success"
git status
git remote add origin https://github.com/Mrjiajia/test1.git
git push -u origin master 